import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'dart:convert';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

Future<String> getDirectory() async {
  // Directory directory = await getApplicationDocumentsDirectory();
  Directory directory = await getApplicationSupportDirectory();
  return directory.path;
}

Future<String> getFilePath() async {
    Directory appDocumentsDirectory = await getApplicationDocumentsDirectory(); // 1
    String appDocumentsPath = appDocumentsDirectory.path; // 2
    String filePath = '$appDocumentsPath/test_file.txt'; // 3

    return filePath;
}

void saveFile() async {
  File file = File(await getFilePath()); // 1
  file.writeAsString("This is my demo text that will be saved to : demoTextFile.txt"); // 2
}
//---------------------------------------------------------
class HeroDescription{
  final String name;
  final String description;
  final List<String> prophecies;

  late String icon;

  HeroDescription(this.name, this.description, this.prophecies);
  HeroDescription.fromJson(Map<String, dynamic> json)
    : name         = json['name'] as String,
      description  = json['description'] as String,
      prophecies   = List<String>.from(json['prophecies']);
}


//---------------------------------------------------------
Future<List<HeroDescription>> getAssetFiles() async {
  var myAssets = await rootBundle.loadString('AssetManifest.json'); //file generated by flutter which you can read up through the default bundle
  Map<String, dynamic> map = json.decode(myAssets);
  // map.removeWhere((key, value) => !key.contains(reg)); //remove all keys that aren't csv files
  List<HeroDescription> descriptions = [];
  for(String path in map.keys){
    if (path.startsWith('heroes') && path.endsWith('json'))
    {
      final rawJson =  await rootBundle.loadString(path);
      Map<String, dynamic> mapJson;
      try{ 
        mapJson = json.decode(rawJson);
      } catch (e){
        print('Error while parse json $path : ${e.toString()}');
        continue;
      }
      final hero = HeroDescription.fromJson(mapJson);
      // hero.icon = path.replaceFirst('json', 'png', path.lastIndexOf('.'));
      late String icon_name;
      try {
       icon_name = p.join('heroes_icons', p.setExtension(p.basenameWithoutExtension(path), '.png')); 
      } catch (e) {
        print('Error while make up path for hero icon $path : ${e.toString()}');
      }
      hero.icon = icon_name;
      descriptions.add(hero);
    }
  }
  return descriptions;
}